@page "/characters"
@inject HttpClient Http
@rendermode InteractiveWebAssembly

<h3>Characters</h3>
<input type="text" @bind="newCharacter.Name" placeholder="Name" />
<button class="btn-primary" @onclick="CreateCharacter">New Character</button>

@if (characters == null)
{
    <p>Loading...</p>
}
else
{
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>&emsp;</th>
                <th>Player</th>
                <th>&emsp;</th>
                <th>Party</th>
                <th>&emsp;</th>
                <th>Career</th>
                <th>&emsp;</th>
                <th>CareerTier</th>
                <th>&emsp;</th>
                <th>Actions:</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var c in characters)
            {
                <tr>
                    <td>@c.Name</td>
                    <td>&emsp;</td>
                    <td>@c.Player</td>
                    <td>&emsp;</td>
                    <td>@c.Party.Name</td>
                    <td>&emsp;</td>
                    <td>@c.Career</td>
                    <td>&emsp;</td>
                    <td>@c.CarrerTier</td>
                    <td>&emsp;</td>
                    <td>
                        <button class="btn-primary" @onclick="() => EditCharacter(c.Id)">Edit</button>
                        <button class="btn-danger" @onclick="() => DeleteCharacter(c.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Character[]? characters;
    private Character newCharacter = new Character();

    protected override async Task OnInitializedAsync()
    {
        characters = await Http.GetFromJsonAsync<Character[]>("api/Characters");
    }

    internal class Character
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Player { get; set; }
        public Party Party { get; set; }
        public string Career { get; set; }
        public string CarrerTier { get; set; }
    }

    internal class Party
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string ShortTermPartyAmbition { get; set; }
        public string LongTermPartyAmbition { get; set; }
        public int PartyAwardedXP { get; set; }
    }

    internal async void UpdateCharacters()
    {
        characters = await Http.GetFromJsonAsync<Character[]>("api/Characters");
    }

    internal async void CreateCharacter()
    {
        var response = await Http.PostAsJsonAsync("api/Characters", new { Name = newCharacter.Name });
        if (response.IsSuccessStatusCode) { UpdateCharacters(); }
        else { Console.WriteLine("Error. Not added."); }
    }

    internal void EditCharacter(int id)
    {
        
    }

    internal void UpdateCharacter(int id)
    {

    }

    internal async void DeleteCharacter(int id)
    {
        var response = await Http.DeleteAsync($"api/Characters/{id}");
        if (response.IsSuccessStatusCode) { UpdateCharacters(); }
    }
}
