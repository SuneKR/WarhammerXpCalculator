@page "/parties"
@inject HttpClient Http
@rendermode InteractiveWebAssembly

<h3>Parties</h3>

<button class="btn-primary" @onclick="TogglePopup">New AdventuringParty</button>
@if (ShowCreatePopup)
{
    <div class="popup-container">
        <div class="popup">
            <h4>Party Info</h4>
            <strong>Name:</strong><input type="text" @bind="newParty.Name" placeholder="Name" /><br />
            <strong>Shortterm Ambition:</strong><input type="text" @bind="newParty.ShortTermPartyAmbition" placeholder="Aquiring Rags" /><br />
            <strong>Longterm Ambition:</strong><input type="text" @bind="newParty.LongTermPartyAmbition" placeholder="Aquiring Riches" /><br />
            <strong>XP Awarded:</strong> <input type="number" @bind="newParty.PartyAwardedXP" placeholder="0" /><br />
            <button class="btn-success" @onclick="CreateParty">Create</button>
            <button class="btn-warning" @onclick="TogglePopup">Cancel</button>
            <button class="btn-danger" @onclick="ClearPopup">Reset</button>
        </div>
    </div>
}

@if (parties == null)
{
    <p>Loading...</p>
}
else
{
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>&emsp;</th>
                <th>Shortterm Amibition</th>
                <th>&emsp;</th>
                <th>Longterm Amibition</th>
                <th>&emsp;</th>
                <th>Xp Awarded</th>
                <th>&emsp;</th>
                <th>Actions:</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in parties)
            {
                <tr>
                    <td>@p.Name</td>
                    <td>&emsp;</td>
                    <td>@p.ShortTermPartyAmbition</td>
                    <td>&emsp;</td>
                    <td>@p.LongTermPartyAmbition</td>
                    <td>&emsp;</td>
                    <td>@p.PartyAwardedXP</td>
                    <td>&emsp;</td>
                    <td>
                        <button class="btn-primary" @onclick="() => EditParty(p.Id)">Edit</button>
                        <button class="btn-danger" @onclick="() => DeleteParty(p.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    @if (ShowEditPopup)
    {
        <div class="popup-container">
            <div class="popup">
                <h4>Party editor</h4>
                <strong>Name:</strong><input type="text" @bind-value="editedParty.Name" /><br />
                <strong>Shortterm Ambition:</strong><input type="text" @bind-value="editedParty.ShortTermPartyAmbition" /><br />
                <strong>Longterm Ambition:</strong><input type="text" @bind-value="editedParty.LongTermPartyAmbition" /><br />
                <strong>XP Awarded:</strong> <input type="number" @bind-value="editedParty.PartyAwardedXP" /><br />
                <button class="brn-success" @onclick="() => UpdateParty(editedParty.Id)">Update</button>
                <button class="brn-warning" @onclick="CloseEdit">Cancel</button>
            </div>
        </div>
    }
}



@code {
    internal Party[]? parties;
    internal Party newParty = new Party();
    internal Party? editedParty = new Party();
    internal bool ShowCreatePopup = false;
    internal bool ShowEditPopup = false;

    protected override async Task OnInitializedAsync()
    {
        parties = await Http.GetFromJsonAsync<Party[]>("api/Parties");
    }

    internal class Party
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string ShortTermPartyAmbition { get; set; }
        public string LongTermPartyAmbition { get; set; }
        public int PartyAwardedXP { get; set; }
    }

    internal void TogglePopup()
    {
        ShowCreatePopup = !ShowCreatePopup;
    }

    internal void ToggleEditPopup()
    {
        ShowEditPopup = !ShowEditPopup;
    }

    internal void ClearPopup()
    {
        newParty = new Party();
    }

    internal async void CreateParty()
    {
        var response = await Http.PostAsJsonAsync("api/Parties", newParty);
        if (response.IsSuccessStatusCode)
        {
            parties = await Http.GetFromJsonAsync<Party[]>("api/Parties");
            ClearPopup();
            TogglePopup();
        }
        else
        {
            Console.WriteLine("Error: not added");
        }
    }

    internal async void EditParty(int id)
    {
        editedParty = await Http.GetFromJsonAsync<Party>($"api/Parties/{id}");
        if(editedParty != null)
        {
            ShowEditPopup = true;
            ShowCreatePopup = false;
        }
        else
        {
            Console.WriteLine($"Error party with id { id } not found");
        }

    }

    internal async void UpdateParty(int id)
    {
        Party? updatedParty = editedParty;
        if (updatedParty != null)
        {
            var response = await Http.PutAsJsonAsync($"api/Parties/{id}", updatedParty);
            if (response.IsSuccessStatusCode)
            {
                parties = await Http.GetFromJsonAsync<Party[]>("api/Parties");
                ShowEditPopup = false;
                ShowCreatePopup = false;
            }
        }
    }

    internal void CloseEdit()
    {
        ShowEditPopup = false;
    }

    internal async void DeleteParty(int id)
    {
        var response = await Http.DeleteAsync($"api/Parties/{id}");
        if (response.IsSuccessStatusCode)
        {
            parties = await Http.GetFromJsonAsync<Party[]>("api/Parties");
        }
    }
}
